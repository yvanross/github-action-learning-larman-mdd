$CATEGORY: $course$/Réusinage


// [tag:seance06]
::Refactoring and GRASP::Appariez l'activité de réusinage (refactoring) avec son principe GRASP {
    =Remplacer des codes pour les types avec des sous classes -> Polymorphisme
    =Extraire des méthodes d'une classe pour former une nouvelle classe. -> Fabrication pure
    =Renommer une classe. -> Aucun rapport
    =Renommer une variable. -> Aucun rapport
    =Introduire objet de paramètre. -> Aucun rapport
    =Déplacer fonction. -> Indirection
    =Extraire fonction. -> Indirection
}

// [tag:seance11]
::Cowboy hacking et refactorisation::Appliquer les activités de réusinage fait partie du "Cowboy Hacking" {FALSE}

::FURPS et code smell::Un "code smell" concerne quelle qualité du logiciel? {
    ~Fonctionnalité
    ~Facilité d'utilisation
    ~Fiabilité
    ~Performance
    =Possibilités de prise en charge
}

// [tag:seance06]
::Refactorisation - activités::[html]<p>Qu'est-ce qui n'est <b>PAS</b> un but ou une activité de la refactorisation?</p>{
	~%-16.66667%<p>supprimer le code dupliqué</p>
	~%-16.66667%<p>rendre le code plus facile à lire et à comprendre</p>
	~%-16.66667%<p>faire en sorte que les méthodes soient plus courtes</p>
	~%-16.66667%<p>éliminer l'utilisation de constantes littérales codées en dur</p>
	~%-16.66667%<p>supprimer les commentaires en rendant le code plus descriptif</p>
	~%50%<p>rendre le code plus rapide</p>#<p>Les changements du code dans une refactorisation ne modifient pas le comportement du code.</p>
	~%50%<p>corriger les bogues dans le code.</p>#<p>Les changements du code dans une refactorisation ne modifient pas le comportement du code.</p>
}
