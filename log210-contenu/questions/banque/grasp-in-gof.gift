$CATEGORY: $course$/GRASP in GOF


// [tag:graspInGoF]
::Statégie fabrique::
[markdown]
Dans la conception du logiciel NextGen POS, le pattern Stratégie (GoF) a été proposé pour supporter la mise en place d'une logique de tarification plus élaborée. Il permet par exemple de définir des réductions sur tout le magasin pendant une journée, ou bien des réductions permanentes pour les personnes âgées, etc.\n ![IStratégieTarification](https\://www.plantuml.com/plantuml/svg/bLBDYjim4BxhAOQSieNu0KAwMKCfvB0bn6bFUndBOoCYZumq3fIG1-fpzCMgA7LYaa3OYpqQVJ_p3NeBWbxwrggmCzoXnnQ2_BOKlzxecviIzQxnhkTAE-iyY4SEyOfOHgYAQkojV7SiFx0boBr12p_PQ5SHl1VAi92lKHDC5elBuVNrWrT5b9I_Vnf3M_IcDXh5E9u01Z355Wwg8TawGJlTmnn-KII_nEBTCQCXTLJQOWWmkUfyyDhrNaSaDhIXrWHASiLway2f0jDsbje86dowAmdcK5k7Cl9-QCrE24edubfmTJ8uT5K9yw-mpmPklaUMynZJ5mMUfFSC9zWN67aU5N459yL7YSxyl0pEzl6Ohz6ByT_-1zlaYPEg-s0-SKU3uy2-zZwPDFeyJsfgc9um2xWOnYx0Q0KAo0QwQS8CqiXFLh9SBi_fLqFurNtsBClKR9P-H_KMvUBp_WS0 "IStrategieTarifiaction") \nVoici la collaboration des éléments du patron dans le contexte du système NextGen POS \:  ![](https\://www.plantuml.com/plantuml/svg/NP4nZjH044NpFiNNHe2q5nW9j9CGiGWnGC8IrBHhJMdRrQQhR0aYha562EUOct0IkctGUYQpw_zw_wlwnfoAJqCAzY0wKg41vbyJmxn8l52E51_waYVjOawvm0kfLOdLDwwExsbA_ZAhlwQ1iIz22UzLOkuOjuTj57-PM2FViXdrl4_IAsB5SGdLuH9b97LSpTZXGvjVWGppkTYssFPjajW-oYVixlHL6_wVBLk9pjTs1o_afz-zy9s-oLDfmTJpMnx4rY0Bro_GiXtFqRE_oquff9n7X1bLIrH5-wSUycIhWxL3Swqckm0ycPy6pSueqdzsv7jOQFhO7V4CusEJXTESmR0MQPuDQJ-J-jhtahZyVqEzBzAVxpz4pKaZLqZ72CijmURh6pO0JZ-H2E7nAakLXH0v9RwEWj29ZTaONMLEMd5YSfGaTMC1B-zw-kLbK_wcVar3-Wi0 "ds-tarifiaction") \n Quel est le rapport entre cette application du pattern Stratégie et le principe GRASP Fabrication Pure? {
	=La hiérarchie des stratégies est un ensemble de classes comportementales et artificielles.
	~Le développeur a « fabriqué » le type interface IStratégieTarification qui est ensuite implémenté par des classes StratégiePourcentageRemise, StratégieRemiseAbsolueAPartirDe, etc. La méthode `getTotal()` doit être implémentée dans ces classes, puisqu'elles implémentent l'interface où elle est définie.
	~Chaque stratégie a une logique « pure », qui va finalement changer le total pour la Vente. Alors, la méthode getTotal() peut se modifier en conformité avec la logique de chaque tarification.
}

// [tag:graspInGoF]
::Stratégie expert::[markdown]Dans la conception du logiciel NextGen POS, le pattern Stratégie (GoF) a été proposé pour supporter la mise en place d'une logique de tarification plus élaborée. Il permet par exemple de définir des réductions sur tout le magasin pendant une journée, ou bien des réductions permanentes pour les personnes âgées, etc. ![](https\://www.plantuml.com/plantuml/svg/bLBDYjim4BxhAOQSieNu0KAwMKCfvB0bn6bFUndBOoCYZumq3fIG1-fpzCMgA7LYaa3OYpqQVJ_p3NeBWbxwrggmCzoXnnQ2_BOKlzxecviIzQxnhkTAE-iyY4SEyOfOHgYAQkojV7SiFx0boBr12p_PQ5SHl1VAi92lKHDC5elBuVNrWrT5b9I_Vnf3M_IcDXh5E9u01Z355Wwg8TawGJlTmnn-KII_nEBTCQCXTLJQOWWmkUfyyDhrNaSaDhIXrWHASiLway2f0jDsbje86dowAmdcK5k7Cl9-QCrE24edubfmTJ8uT5K9yw-mpmPklaUMynZJ5mMUfFSC9zWN67aU5N459yL7YSxyl0pEzl6Ohz6ByT_-1zlaYPEg-s0-SKU3uy2-zZwPDFeyJsfgc9um2xWOnYx0Q0KAo0QwQS8CqiXFLh9SBi_fLqFurNtsBClKR9P-H_KMvUBp_WS0 "IStrategieTarifiaction") \nVoici la collaboration des éléments du patron dans le contexte du système NextGen POS \: \n![](https\://www.plantuml.com/plantuml/svg/NP4nZjH044NpFiNNHe2q5nW9j9CGiGWnGC8IrBHhJMdRrQQhR0aYha562EUOct0IkctGUYQpw_zw_wlwnfoAJqCAzY0wKg41vbyJmxn8l52E51_waYVjOawvm0kfLOdLDwwExsbA_ZAhlwQ1iIz22UzLOkuOjuTj57-PM2FViXdrl4_IAsB5SGdLuH9b97LSpTZXGvjVWGppkTYssFPjajW-oYVixlHL6_wVBLk9pjTs1o_afz-zy9s-oLDfmTJpMnx4rY0Bro_GiXtFqRE_oquff9n7X1bLIrH5-wSUycIhWxL3Swqckm0ycPy6pSueqdzsv7jOQFhO7V4CusEJXTESmR0MQPuDQJ-J-jhtahZyVqEzBzAVxpz4pKaZLqZ72CijmURh6pO0JZ-H2E7nAakLXH0v9RwEWj29ZTaONMLEMd5YSfGaTMC1B-zw-kLbK_wcVar3-Wi0 "ds-tarifiaction") \nQuel est le rapport entre cette application du pattern Stratégie et le principe GRASP Expert?{
	~La classe Vente est l'expert du `sousTotal()` de chaque LigneArticles.
	~Les développeurs doivent être les experts de la tarification avant d'écrire les implémentations de getTotal() dans les stratégies concrètes.
	~Déterminer des réductions pour les personnes âgées est une affaire des experts. Les développeurs ne doivent pas proposer de telles réductions.
	=La stratégie n'est pas un expert du total de la vente en cours avant d'appliquer sa tarification.
}

// [tag:graspInGoF]
::Stratégie polymorphisme::[markdown]Dans la conception du logiciel NextGen POS, le pattern Stratégie (GoF) a été proposé pour supporter la mise en place d'une logique de tarification plus élaborée. Il permet par exemple de définir des réductions sur tout le magasin pendant une journée, ou bien des réductions permanentes pour les personnes âgées, etc.\n ![](https\://www.plantuml.com/plantuml/svg/bLBDYjim4BxhAOQSieNu0KAwMKCfvB0bn6bFUndBOoCYZumq3fIG1-fpzCMgA7LYaa3OYpqQVJ_p3NeBWbxwrggmCzoXnnQ2_BOKlzxecviIzQxnhkTAE-iyY4SEyOfOHgYAQkojV7SiFx0boBr12p_PQ5SHl1VAi92lKHDC5elBuVNrWrT5b9I_Vnf3M_IcDXh5E9u01Z355Wwg8TawGJlTmnn-KII_nEBTCQCXTLJQOWWmkUfyyDhrNaSaDhIXrWHASiLway2f0jDsbje86dowAmdcK5k7Cl9-QCrE24edubfmTJ8uT5K9yw-mpmPklaUMynZJ5mMUfFSC9zWN67aU5N459yL7YSxyl0pEzl6Ohz6ByT_-1zlaYPEg-s0-SKU3uy2-zZwPDFeyJsfgc9um2xWOnYx0Q0KAo0QwQS8CqiXFLh9SBi_fLqFurNtsBClKR9P-H_KMvUBp_WS0 "IStrategieTarification") \nVoici la collaboration des éléments du patron dans le contexte du système NextGen POS \: \n![](https\://www.plantuml.com/plantuml/svg/NP4nZjH044NpFiNNHe2q5nW9j9CGiGWnGC8IrBHhJMdRrQQhR0aYha562EUOct0IkctGUYQpw_zw_wlwnfoAJqCAzY0wKg41vbyJmxn8l52E51_waYVjOawvm0kfLOdLDwwExsbA_ZAhlwQ1iIz22UzLOkuOjuTj57-PM2FViXdrl4_IAsB5SGdLuH9b97LSpTZXGvjVWGppkTYssFPjajW-oYVixlHL6_wVBLk9pjTs1o_afz-zy9s-oLDfmTJpMnx4rY0Bro_GiXtFqRE_oquff9n7X1bLIrH5-wSUycIhWxL3Swqckm0ycPy6pSueqdzsv7jOQFhO7V4CusEJXTESmR0MQPuDQJ-J-jhtahZyVqEzBzAVxpz4pKaZLqZ72CijmURh6pO0JZ-H2E7nAakLXH0v9RwEWj29ZTaONMLEMd5YSfGaTMC1B-zw-kLbK_wcVar3-Wi0 "ds-tarifiaction")\n
Quel est le rapport entre cette application du pattern Stratégie et le principe GRASP Polymorphisme?{
	=Chaque stratégie concrète est responsable d'un comportement qui varie et possède une opération polymorphe `getTotal()`.
	~La hiérarchie des stratégies est un ensemble de classes comportementales et artificielles.
	~Il existe un type interface IStratégieTarification qui est ensuite implémenté par des classes StratégiePourcentageRemise, StratégieRemiseAbsolueAPartirDe, etc. La méthode `getTotal()` doit être implémentée dans ces classes, puisqu'elles implémentent l'interface où la méthode `getTotal()` est définie.
}

// [tag:graspInGoF]
::stratégie protection des variations::[markdown]Dans la conception du logiciel NextGen POS, le pattern Stratégie (GoF) a été proposé pour supporter la mise en place d'une logique de tarification plus élaborée. Il permet par exemple de définir des réductions sur tout le magasin pendant une journée, ou bien des réductions permanentes pour les personnes âgées, etc.\n ![](https\://www.plantuml.com/plantuml/svg/bLBDYjim4BxhAOQSieNu0KAwMKCfvB0bn6bFUndBOoCYZumq3fIG1-fpzCMgA7LYaa3OYpqQVJ_p3NeBWbxwrggmCzoXnnQ2_BOKlzxecviIzQxnhkTAE-iyY4SEyOfOHgYAQkojV7SiFx0boBr12p_PQ5SHl1VAi92lKHDC5elBuVNrWrT5b9I_Vnf3M_IcDXh5E9u01Z355Wwg8TawGJlTmnn-KII_nEBTCQCXTLJQOWWmkUfyyDhrNaSaDhIXrWHASiLway2f0jDsbje86dowAmdcK5k7Cl9-QCrE24edubfmTJ8uT5K9yw-mpmPklaUMynZJ5mMUfFSC9zWN67aU5N459yL7YSxyl0pEzl6Ohz6ByT_-1zlaYPEg-s0-SKU3uy2-zZwPDFeyJsfgc9um2xWOnYx0Q0KAo0QwQS8CqiXFLh9SBi_fLqFurNtsBClKR9P-H_KMvUBp_WS0 "IStrategieTarifiaction") \nVoici la collaboration des éléments du patron dans le contexte du système NextGen POS \:\n![](https\://www.plantuml.com/plantuml/svg/NP4nZjH044NpFiNNHe2q5nW9j9CGiGWnGC8IrBHhJMdRrQQhR0aYha562EUOct0IkctGUYQpw_zw_wlwnfoAJqCAzY0wKg41vbyJmxn8l52E51_waYVjOawvm0kfLOdLDwwExsbA_ZAhlwQ1iIz22UzLOkuOjuTj57-PM2FViXdrl4_IAsB5SGdLuH9b97LSpTZXGvjVWGppkTYssFPjajW-oYVixlHL6_wVBLk9pjTs1o_afz-zy9s-oLDfmTJpMnx4rY0Bro_GiXtFqRE_oquff9n7X1bLIrH5-wSUycIhWxL3Swqckm0ycPy6pSueqdzsv7jOQFhO7V4CusEJXTESmR0MQPuDQJ-J-jhtahZyVqEzBzAVxpz4pKaZLqZ72CijmURh6pO0JZ-H2E7nAakLXH0v9RwEWj29ZTaONMLEMd5YSfGaTMC1B-zw-kLbK_wcVar3-Wi0 "ds-tarification")\nQuel est le rapport entre cette application du pattern Stratégie et le principe GRASP Protection des variations?{
	~Les implémentations de chaque logique de tarification sont protégées des variations dans la classe Vente.
	~Chaque tarification peut changer le total pour la Vente. Puisque le total peut varier ainsi que la tarification, nous avons besoin d'une protection face à ces changements. Le pattern Stratégie fournit cette protection.
	=La logique de tarification se veut flexible dans le système NextGen POS. Le type interface IStratégieTarification crée une stabilité pour la classe Vente permettant l'ajout de nouvelles tarifications sans impact négatif sur la classe Vente.
}

// [tag:Singleton]
::Pour chaque caractéristique de l’initialisation d’un objet (singleton), indiquez s’il s’agit de l’initialisation différée (lazy initialization) ou de l’initialisation immédiate (eager initialization) \:::
[markdown]
Pour chaque caractéristique de l’initialisation d’un objet (singleton), indiquez s’il s’agit de l’initialisation différée (lazy initialization) ou de l’initialisation immédiate (eager initialization) \:{
	=Elle nécessite un contrôle de la concurrence des threads. -> Initialisation différée (lazy initialization)
	=Elle peut ralentir le démarrage de l’application. -> Initialisation immédiate (eager initialization)
	=Elle peut introduire un délai inattendu lors du premier accès à l’objet. -> Initialisation différée (lazy initialization)
	=Elle évite la mise en place des ressources coûteuses si un objet n’est finalement pas utilisé. -> Initialisation différée (lazy initialization)
	=Elle comprend normalement une logique de création simple. -> Initialisation immédiate (eager initialization)
}

// [tag:graspInGoF]
::Quels sont les principes GRASP présents dans le pattern GoF Adaptateur appliqué pour supporter plusieurs calculateurs de taxes?::
[markdown]Quels sont les principes GRASP présents dans le pattern GoF Adaptateur appliqué pour supporter plusieurs calculateurs de taxes?
\n ![FigureA26.1](https\://www.plantuml.com/plantuml/svg/hP0n2y8m48Nt_8hWf4j11wTI6WIBWrAieo1dUjPWcfRBLHJnlvi8RXrT7jnxntsFopq3yT1QkJRDGAWMosGk_Csu7WXQwVbfCIWP7RU4jk2zdAIfSOnq0OrPTdGRfNKtE3QkKJNq8Pb8y3BQgfOlSJg9llEyHutc3cUBKxaYh0sNy6pHiPnzymfY4ZKOIPA8zuzNgN8SSO375doO0iUqlSLuxf_aWX1urn5VaTnuXq8LeKP9tTyxvEZgyFKF "FigureA26.1") \n ![FigureA26.2](https\://www.plantuml.com/plantuml/svg/PP2nJiGm38RtF8Lr4mnqk86X0xeiYEL4HVe2Lce5wveq9EwfVNjSoWa4Gppy_lmvoQaA5fdZ2CySvaBs-DWSJRrmobWmGfLr9As5_KRzwZZwc2bvEbEj6AYdHUp88KLA0buB5QEaiEUC6XtQDmfSDJu0LlZRTBQptazp4ax13fXlOCMCmt_OhQgADy8yF4615Y9UgCDrkuD1Btn58LtLD0teCGMK-n8gcwSg3aUwqqJVUFypiAzCqpRBuLrQSA-sW-bA1LxwlZE-q3TdTjkkLUcoBEP4QT2_-WG0 "FigureA26.2")
{
	~%16.66667%Polymorphisme#Différents adaptateurs ont un comportement similaire, mais variable pour s’adapter aux divers calculateurs de taxes externes.
	~%-50%Créateur#Le principe GRASP Créateur concerne le problème de responsabilité pour créer des objets, tandis que le pattern Adaptateur est censé résoudre un problème d’interfaces incompatibles. Alors, le GRASP Créateur ne s’y applique pas.
	~%16.66667%Indirection#La classe qui utilise l’interface « IAdaptateurCalculTaxes » ne sera pas couplée directement aux services externes de calcul de taxes. Les adaptateurs concrets servent d’intermédiaire et créent donc une indirection.
	~%16.66667%Faible couplage#L’interface « IAdaptateurCalculTaxes » ainsi que toutes les implémentations concrètes (polymorphes) servent d’intermédiaire (Indirection). Alors, c’est une façon d’obtenir un faible couplage
	~%16.66667%Forte cohésion#L’interface « IAdaptateurCalculTaxes » est une Fabrication pure. Toute Fabrication pure est une classe qui a une forte cohésion. La responsabilité dont la Fabrication pure s’occupe est en effet une responsabilité de moins pour au moins une autre classe, ce qui la rend plus cohésive en principe.
	~%16.66667%Protection des variations#Le polymorphisme et l’indirection font en sorte que l’interface « IAdaptateurCalculTaxes » serve de point de stabilité pour les variations qui existent dans les adaptateurs concrets.
	~%16.66667%Fabrication pure#Une Fabrication pure est une classe avec une cohésion très forte (souvent une seule responsabilité) et elle a été proposée pour résoudre un problème de cohésion. Alors, l’interface « IAdaptateurCalculTaxes » est une Fabrication pure, puisqu’elle prend la responsabilité de faire adapter les appels de calcul de taxes pour les différents services externes.
	~%-50%Contrôleur#Le principe Contrôleur concerne la responsabilité de traiter des opérations système. Ce principe n’est pas du tout considéré dans Adaptateur.
}

// [tag:graspInGoF]
::GRASP plus général que GoF::[markdown]Les GRASP sont des principes basés sur des Design Patterns GoF.{FALSE#Incorrect. Les GRASP sont des principes de conception sur lesquels sont basés les patterns GoF.#Correct. Les GRASP sont des principes de conception sur lesquels sont basés les patterns GoF.}
