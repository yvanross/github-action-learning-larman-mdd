
@startuml
title Diagramme de communication: initialize
left to right direction
rectangle "saleFrame1:SaleFrame1" as SF
rectangle ":Sale" as S
rectangle ":List<PropertyListener>" as LP
Start -- SF: initialize(Sale sale)
SF -- S: 1. addPropertyListener(PropertyListener saleFrame1) >
S -- LP: 1.1 add(PropertyListener saleFrame1) >
@enduml


@startuml
title Diagramme de communication: setTotal (polymorphe)
left to right direction
rectangle ":Sale" as S
rectangle "propertyListener[i]:List<PropertyListener>" as LP

Start -- S: setTotal(Money newTotal) >
S -- S : 1 publishPropertyEvent(String property,Money value) >
S -- LP: 1.1* onPropertyEvent(Sale this, String name, Money value) >
note on link: Opération polymorphe
@enduml


@startuml
title Diagramme de communication: setTotal SaleFrame1
left to right direction

rectangle ":Sale" as S
rectangle "saleFrame:SaleFrame1" as SF
S -- SF: 1.1* onPropertyEvent(Sale this, String name, Money value) >
note on link: Opération polymorphe
@enduml


@startuml
title Diagramme d'activité (initialise)

|saleFrame:SaleFrame1|
start
:initialize(Sale sale);
|:Sale|
:addPropertyListener(PropertyListener saleFrame1);
|:List<PropertyListener|
:add(PropertyListener sale);
stop
@enduml


@startuml
title Diagramme d'activité (setTotal généralisation)
|:Sale|
start
:setTotal(Money newTotal);
:publishPropertyEvent(String variable, Money total);
|propertyListener[i]:PropertyListener|
:onPropertyEvent(Sale sale, String name, Money value);
note: Opération polymorphe
stop
@enduml

@startuml
title Diagramme d'activité (setTotal spécialisation)
|:SaleFrame1|
start
:onPropertyEvent(Sale sale, String name, Money value);
note: Opération polymorphe
|saleTextField:TextField|
if(name == sale.total) then
  :setText(String value);
endif
stop
@enduml

@startuml
title diagramme de séquence (initialise)
skinparam style strictuml
participant "saleFrame:SaleFrame1" as SF
participant ":Sale" as S
participant ":List<PropertyListener>" as LP
[o-> SF  :initialize(Sale sale)
note right of SF: opération polymorphe
SF -> S : addPropertyListener(PropertyListener saleFrame)
S -> LP : add(PropertyListener saleFrame)
@enduml

@startuml

title diagramme de séquence (setTotal généralisation)
skinparam style strictuml
participant ":Sale" as S
participant "propertyListener[i]:List<PropertyListener>" as LP
[o-> S : setTotal(Money newTotal)
activate S
S -> S : publishPropertyEvent(String variable, Money total)
activate S
loop 
S -> LP : onPropertyEvent(Sale sale, String name, Money value)
end
deactivate S
deactivate S
@enduml

@startuml
title diagramme de séquence (setTotal spécialisation)
skinparam style strictuml
participant ":Sale" as S
participant ":SaleFrame1" as SF
participant "saleTextField::TextField" as STF
note right of S: Opération polymorphe
S -> SF : onPropertyEvent(Sale sale, String name, Money value)
activate SF
opt name == sale.total
SF -> STF : setText(String string)
end 
deactivate SF
@enduml
